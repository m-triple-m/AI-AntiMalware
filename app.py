from flask import Flask, render_template, url_for, request, session
from werkzeug import secure_filename
import os
from pathlib import Path
import predict
from database import database
from datetime import datetime
import ast
from training import train

train()
app=Flask(__name__)

UPLOAD_FOLDER = os.path.abspath('./uploads')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.secret_key='abcd'

@app.route('/')
def home():
    return render_template('home.html')


@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/file_checker')
def file_checker():
    return render_template('file_checker.html')

@app.route('/report')
def report():
    db=database()
    report=db.get_data("""select * from report""")
    return render_template('display_report.html', report=report)

@app.route('/check', methods=['GET', 'POST'])
def check():
    if request.method=='POST':
        try:
            folder=request.form.get('path')
            session['folder']=folder
            if os.path.exists(folder):
                pathlist=list(Path(folder).glob('**/*.exe'))+list(Path(folder).glob('**/*.dll'))
                pro={}
                for path in pathlist:
                    pro[path]={'base':os.path.basename(path), 'size':f'{int(os.path.getsize(path))/(1024*1024)} MB'}
                return render_template('check.html', pro=pro)
        except Exception as e:
            print('exception occured')
            print(e)
    return render_template('check.html')

@app.route('/display_result')
def display():
    db=database()
    time=datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    path = request.args.get('pBibiliographyh')
    if path:
        file_name=os.path.baseBibiliographyme(path)
        print(os.path.join('path' ,os.path.dirname(os.path.realpath(__file__)),'classifier/classifier.pkl'))
        result=predict.predict(path, os.path.join(os.path.dirname(os.path.realpath(__file__)),'classifier/classifier.pkl'), os.path.join(os.path.dirname(os.path.realpath(__file__)),'classifier/feature.pkl'))
        print(result)
        db.run("""insert into report values(null, ?, ?, ?, ?)""", (time, file_name, path, result))
        return render_template('display_result.html', result=result, file_name=file_name, path=path)

    folder=session.get('folder')
    if folder:
        pathlist=list(Path(folder).glob('**/*.exe'))+list(Path(folder).glob('**/*.dll'))
        results={}
        for path in pathlist:
            base=os.path.basename(path)
            results['path']=path
            results[base]=predict.predict(path, os.path.join(os.path.dirname(os.path.realpath(__file__)),'classifier/classifier.pkl'), os.path.join(os.path.dirname(os.path.realpath(__file__)),'classifier/feature.pkl'))
            db.run("""insert into report values(null, ?, ?, ?, ?)""", (time, base, str(path), results[base]))
        return render_template('display_result.html', results=results)
    return 'None'   

@app.route('/protected')
def clean():
    file = request.args.get('path')
    if type(file)=='str':
        file=ast.literal_eval(file)
    print(file)
    # if file:
    #     for item in file:

        #     os.renames(item, os.path.join('h:/Detected_Malwares', file[item]))
        #     return render_template('protect.html', file=file)
        # return 'none'
    return render_template('protect.html', file=file)

@app.route('/testing')
def testing():
    return render_template('test.html')

if __name__ == "__main__":
    app.run(debug=True)